rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read all user profiles (for search, etc.)
    match /users/{userId} {
      allow read: if true;
      allow write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow users to update followers/following arrays for follow/unfollow functionality
    match /users/{userId} {
      allow update: if request.auth != null && 
        // Allow updating followers array (when someone follows/unfollows this user)
        (onlyUpdatingFields(['followers']) ||
         // Allow updating own following array
         (request.auth.uid == userId && onlyUpdatingFields(['following'])));
    }
    
    // Allow authenticated users to create posts and read all posts
    match /posts/{postId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
      allow update: if request.auth != null && (
        // Allow post owner to update their own posts
        request.auth.uid == resource.data.userId ||
        // Allow updating connectedPosts array (for recipe connections)
        (!('userId' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('createdAt' in request.resource.data.diff(resource.data).affectedKeys()) &&
         !('username' in request.resource.data.diff(resource.data).affectedKeys())) ||
        // Allow updating only the comments count (for comment functionality)
        (onlyUpdatingFields(['comments']) && isIncrementingCommentCount()) ||
        // Allow updating only the likes count (for like functionality)
        (onlyUpdatingFields(['likes']) && isValidLikeUpdate())
      );
    }
    
    // Allow authenticated users to read/write comments
    match /comments/{commentId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
    }
    
    // Allow authenticated users to manage their own likes
    match /likes/{likeId} {
      allow read: if true;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
      allow delete: if request.auth != null && 
                   request.auth.uid == resource.data.userId;
    }
    
    // Helper function to check if only specific fields are being updated
    function onlyUpdatingFields(fields) {
      return request.resource.data.diff(resource.data).affectedKeys().hasOnly(fields);
    }
    
    // Helper function to check if comments count is being incremented properly
    function isIncrementingCommentCount() {
      return request.resource.data.comments > resource.data.comments &&
             request.resource.data.comments <= resource.data.comments + 1;
    }
    
    // Helper function to check if likes count is being updated properly
    function isValidLikeUpdate() {
      return (request.resource.data.likes == resource.data.likes + 1) ||
             (request.resource.data.likes == resource.data.likes - 1);
    }
  }
}